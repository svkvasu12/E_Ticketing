@model Actor



@{
    ViewData["Title"] = "Details";
}

<h1>Details</h1>

<div>
    <h4>Actor</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.FullName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FullName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Bio)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Bio)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.FileName)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FileName)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.File)
        </dt>
        <dd class="col-sm-10">
            @*@Html.DisplayFor(model => model.File)*@

            <img src="data:image/jpeg;base64,@Convert.ToBase64String(@Model.File)" class="card-img img-fluid" width="96" height="350" alt="" />

        </dd>
    </dl>
    <div class="form-group">
        @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
        {
    <a class="btn btn-outline-success float-right" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
        }
        <a class="btn btn-outline-secondary" asp-action="Index">Show All</a>
    </div>
</div>


<script>

    function getFile(data) {
        //const image = document.querySelector('img');
        const image = document.getElementById('actorImage')
        const reader = new FileReader();
        const file = data.files[0];

        reader.addEventListener("load", function () {
            image.src = reader.result;
        }, false);

        reader.readAsDataURL(file);

    }
</script>
@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
